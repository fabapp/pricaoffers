buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.bmuschko:gradle-docker-plugin:3.1.0'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile 'org.projectlombok:lombok:1.16.18'
	
	compile('org.springframework.boot:spring-boot-starter-web')
	compile "org.springframework.boot:spring-boot-devtools"
	
	// AOP
	compile "org.springframework.boot:spring-boot-starter-aop"
	
	// Kafka
	compile 'org.springframework.kafka:spring-kafka'
	
	// JPA
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "org.hibernate:hibernate-core:5.2.10.Final" // update hibernate
	compile "mysql:mysql-connector-java:5.1.43"
	
	
	testCompile "com.h2database:h2:1.4.196" 
    testCompile 'org.springframework.kafka:spring-kafka-test'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/it/java')
		}
		resources.srcDir file('src/it/resources')
	}
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath

	outputs.upToDateWhen { false }

	testLogging {
		events "passed", "skipped", "failed"
	}
}


// Docker...
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def applicationProps = new Properties()
applicationProps.load(new FileInputStream(file("src/main/resources/application.properties")))

docker {
    javaApplication {
        baseImage = 'openjdk:8-jdk'
        maintainer = '<TODO>'
        ports = [applicationProps['server.port']]
        tag = "${project.name}-${project.version}"
    }
}

task createDockerfile(type: Dockerfile) {
    destFile = file("./Dockerfile")
    from 'openjdk:8-jdk'
	volume '/tmp'
    copyFile "./build/libs/${jar.archiveName}", "${jar.archiveName}"
    exposePort Integer.parseInt(applicationProps['server.port'])
    entryPoint 'java','-Djava.security.egd=file:/dev/./urandom', "-Dspring.profiles.active=container", '-jar',"/${jar.archiveName}"
    maintainer 'Fabian Kr√ºger'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    dockerFile file("./Dockerfile")
    inputDir = file(".") // createDockerfile.destFile.parentFile
    tag = "appblocks/${project.name}:latest"
}

/* TODO...
task removeContainer(type: DockerRemoveContainer) {
    targetContainerId { "container-that-does-exist" }
    onComplete {
        println "Executes first"
    }
    doLast {
        println "Executes second"
    }
}
*/

task createAppContainer(type: DockerCreateContainer) {
	def port = applicationProps['server.port'] 
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    portBindings = ["${port}:${port}"]
}

task startAppContainer(type: DockerStartContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task stopAppContainer(type: DockerStopContainer) {
    targetContainerId { createAppContainer.getContainerId() }
}

task functionalTest(type: Test) {
    dependsOn startAppContainer
    finalizedBy stopAppContainer
}
